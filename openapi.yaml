openapi: 3.0.3
info:
  title: DuoStackDemo API
  description: |
    API specification for DuoStackDemo.
    This spec serves as the single source of truth for both Node.js and .NET backends.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Node.js backend
  - url: http://localhost:5000/api/v1
    description: .NET backend

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken

  schemas:
    # Response wrappers
    SuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string

    # Enums
    Role:
      type: string
      enum: [User, Admin, Superuser]

    EventVisibility:
      type: string
      enum: [Private, Public, Restricted]

    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        emailConfirmed:
          type: boolean
        username:
          type: string
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        avatarUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Auth schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        username:
          type: string
          minLength: 3
        firstName:
          type: string
        lastName:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object
          required:
            - user
            - accessToken
          properties:
            user:
              $ref: '#/components/schemas/User'
            accessToken:
              type: string

    TokenResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object
          required:
            - accessToken
          properties:
            accessToken:
              type: string

    # Profile schemas
    UpdateProfileRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        bio:
          type: string

    # Message schemas
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fromUserId:
          type: string
          format: uuid
        toUserId:
          type: string
          format: uuid
        content:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    SendMessageRequest:
      type: object
      required:
        - toUserId
        - content
      properties:
        toUserId:
          type: string
          format: uuid
        content:
          type: string
          minLength: 1

    Conversation:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        lastMessage:
          $ref: '#/components/schemas/Message'
        unreadCount:
          type: integer

    # Event schemas
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
          nullable: true
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        visibility:
          $ref: '#/components/schemas/EventVisibility'
        allowedUserIds:
          type: array
          items:
            type: string
            format: uuid
        createdBy:
          type: string
          format: uuid
          description: ID of the user who created the event
        creatorUsername:
          type: string
          description: Username of the user who created the event
        color:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
          description: Location of the event
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateEventRequest:
      type: object
      required:
        - title
        - startTime
        - endTime
        - visibility
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        visibility:
          $ref: '#/components/schemas/EventVisibility'
        allowedUserIds:
          type: array
          items:
            type: string
            format: uuid
        color:
          type: string
        location:
          type: string

    UpdateEventRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        visibility:
          $ref: '#/components/schemas/EventVisibility'
        allowedUserIds:
          type: array
          items:
            type: string
            format: uuid
        color:
          type: string
        location:
          type: string

    # Room schemas
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        isPublic:
          type: boolean
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    CreateRoomRequest:
      type: object
      required:
        - name
        - isPublic
      properties:
        name:
          type: string
          minLength: 1
        isPublic:
          type: boolean

    UpdateRoomRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        isPublic:
          type: boolean

    # Page (CMS) schemas
    Page:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        slug:
          type: string
        content:
          type: string
        isPublished:
          type: boolean
        createdBy:
          type: string
          format: uuid
        creator:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreatePageRequest:
      type: object
      required:
        - title
        - slug
        - content
      properties:
        title:
          type: string
          minLength: 1
        slug:
          type: string
          minLength: 1
        content:
          type: string
        isPublished:
          type: boolean

    UpdatePageRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        slug:
          type: string
          minLength: 1
        content:
          type: string
        isPublished:
          type: boolean

    # Role update schema
    UpdateRoleRequest:
      type: object
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/Role'

paths:
  # Auth endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=abcde12345; HttpOnly; SameSite=Strict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=abcde12345; HttpOnly; SameSite=Strict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      message:
                        type: string

  /auth/confirm-email:
    get:
      tags:
        - Authentication
      summary: Confirm email address
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User management endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get all users (Admin+ only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 50
        - name: search
          in: query
          schema:
            type: string
          description: Search query for username, email, first name, or last name (case-insensitive)
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      total:
                        type: integer
                      page:
                        type: integer
                      pageSize:
                        type: integer
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID (self or Admin+)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user (self or Admin+)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Soft delete user (Admin+ only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/role:
    put:
      tags:
        - Users
      summary: Update user role (Superuser only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Superuser role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Profile endpoints
  /profile/me:
    get:
      tags:
        - Profile
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/User'

    put:
      tags:
        - Profile
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/User'

  /profile/me/avatar:
    post:
      tags:
        - Profile
      summary: Upload avatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      avatarUrl:
                        type: string

  # Message endpoints
  /messages/conversations:
    get:
      tags:
        - Messages
      summary: Get all conversations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'

  /messages/conversations/{userId}:
    get:
      tags:
        - Messages
      summary: Get conversation with specific user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'

  /messages:
    post:
      tags:
        - Messages
      summary: Send a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Message'

  # Event endpoints
  /events:
    get:
      tags:
        - Events
      summary: Get events (filtered by visibility and date range)
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: visibility
          in: query
          schema:
            $ref: '#/components/schemas/EventVisibility'
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'

    post:
      tags:
        - Events
      summary: Create event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Event'

  /events/{id}:
    get:
      tags:
        - Events
      summary: Get event by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Events
      summary: Update event (owner/Admin/Superuser)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Event'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Events
      summary: Soft delete event (owner/Admin/Superuser)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Room endpoints
  /rooms:
    get:
      tags:
        - Rooms
      summary: Get all rooms
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'

    post:
      tags:
        - Rooms
      summary: Create room (Admin+ only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Room'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{id}:
    put:
      tags:
        - Rooms
      summary: Update room (Admin+ only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomRequest'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Room'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Rooms
      summary: Soft delete room (Admin+ only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Room deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Page (CMS) endpoints
  /pages:
    get:
      tags:
        - Pages
      summary: Get all published pages
      responses:
        '200':
          description: Pages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'

    post:
      tags:
        - Pages
      summary: Create page (Superuser only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
      responses:
        '201':
          description: Page created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Page'
        '403':
          description: Forbidden - Superuser role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pages/{slug}:
    get:
      tags:
        - Pages
      summary: Get page by slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Page retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Page'
        '404':
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pages/{id}:
    put:
      tags:
        - Pages
      summary: Update page (Superuser only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePageRequest'
      responses:
        '200':
          description: Page updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    $ref: '#/components/schemas/Page'
        '403':
          description: Forbidden - Superuser role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Pages
      summary: Soft delete page (Superuser only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Page deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        '403':
          description: Forbidden - Superuser role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
